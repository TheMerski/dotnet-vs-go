// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: generic/v1/generic.proto

package genericv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/themerski/dotnet-vs-go/connect/internal/gen/generic/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// GenericServiceName is the fully-qualified name of the GenericService service.
	GenericServiceName = "generic.v1.GenericService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GenericServiceGetStaticDataProcedure is the fully-qualified name of the GenericService's
	// GetStaticData RPC.
	GenericServiceGetStaticDataProcedure = "/generic.v1.GenericService/GetStaticData"
	// GenericServiceGetDynamicDataProcedure is the fully-qualified name of the GenericService's
	// GetDynamicData RPC.
	GenericServiceGetDynamicDataProcedure = "/generic.v1.GenericService/GetDynamicData"
)

// GenericServiceClient is a client for the generic.v1.GenericService service.
type GenericServiceClient interface {
	// RPC Which always returns the same data (so can be cached)
	GetStaticData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStaticDataResponse], error)
	// RPC Which returns data which is unique to the request (so cannot be cached)
	GetDynamicData(context.Context, *connect.Request[v1.GetDynamicDataRequest]) (*connect.Response[v1.GetDynamicDataResponse], error)
}

// NewGenericServiceClient constructs a client for the generic.v1.GenericService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenericServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GenericServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &genericServiceClient{
		getStaticData: connect.NewClient[emptypb.Empty, v1.GetStaticDataResponse](
			httpClient,
			baseURL+GenericServiceGetStaticDataProcedure,
			opts...,
		),
		getDynamicData: connect.NewClient[v1.GetDynamicDataRequest, v1.GetDynamicDataResponse](
			httpClient,
			baseURL+GenericServiceGetDynamicDataProcedure,
			opts...,
		),
	}
}

// genericServiceClient implements GenericServiceClient.
type genericServiceClient struct {
	getStaticData  *connect.Client[emptypb.Empty, v1.GetStaticDataResponse]
	getDynamicData *connect.Client[v1.GetDynamicDataRequest, v1.GetDynamicDataResponse]
}

// GetStaticData calls generic.v1.GenericService.GetStaticData.
func (c *genericServiceClient) GetStaticData(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStaticDataResponse], error) {
	return c.getStaticData.CallUnary(ctx, req)
}

// GetDynamicData calls generic.v1.GenericService.GetDynamicData.
func (c *genericServiceClient) GetDynamicData(ctx context.Context, req *connect.Request[v1.GetDynamicDataRequest]) (*connect.Response[v1.GetDynamicDataResponse], error) {
	return c.getDynamicData.CallUnary(ctx, req)
}

// GenericServiceHandler is an implementation of the generic.v1.GenericService service.
type GenericServiceHandler interface {
	// RPC Which always returns the same data (so can be cached)
	GetStaticData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStaticDataResponse], error)
	// RPC Which returns data which is unique to the request (so cannot be cached)
	GetDynamicData(context.Context, *connect.Request[v1.GetDynamicDataRequest]) (*connect.Response[v1.GetDynamicDataResponse], error)
}

// NewGenericServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenericServiceHandler(svc GenericServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	genericServiceGetStaticDataHandler := connect.NewUnaryHandler(
		GenericServiceGetStaticDataProcedure,
		svc.GetStaticData,
		opts...,
	)
	genericServiceGetDynamicDataHandler := connect.NewUnaryHandler(
		GenericServiceGetDynamicDataProcedure,
		svc.GetDynamicData,
		opts...,
	)
	return "/generic.v1.GenericService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GenericServiceGetStaticDataProcedure:
			genericServiceGetStaticDataHandler.ServeHTTP(w, r)
		case GenericServiceGetDynamicDataProcedure:
			genericServiceGetDynamicDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGenericServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenericServiceHandler struct{}

func (UnimplementedGenericServiceHandler) GetStaticData(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetStaticDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("generic.v1.GenericService.GetStaticData is not implemented"))
}

func (UnimplementedGenericServiceHandler) GetDynamicData(context.Context, *connect.Request[v1.GetDynamicDataRequest]) (*connect.Response[v1.GetDynamicDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("generic.v1.GenericService.GetDynamicData is not implemented"))
}
